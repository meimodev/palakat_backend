// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_POSTGRES_URL")
}

model Church {
  id Int @default(autoincrement()) @id
  name String
  latitude String
  longitude String
  address String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberships Membership[]
  columns Column[]
}

model Column {
  id Int @default(autoincrement()) @id
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberships Membership[]
  church Church @relation(fields: [churchId], references: [id], onDelete: Cascade)
  churchId Int
}

model Membership {
  id Int @default(autoincrement()) @id
  baptize Boolean @default(false)
  sidi Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account Account @relation(fields: [accountId], references: [id])
  accountId Int @unique
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId Int
  church Church @relation(fields: [churchId], references: [id], onDelete: Cascade)
  churchId Int
  activities Activity[]
}

model Account {
  id Int @default(autoincrement()) @id
  name String
  phone String @unique
  gender Gender
  married Boolean
  dob DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  membershipId Int?
  membership Membership?

}

model Activity {
  id           Int       @id @default(autoincrement())
  membership   Membership   @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  membershipId Int       

  bipra        Bipra
  title        String
  location     String?
  latitude     String?
  longitude    String?
  date         DateTime?
  note         String?
  fileUrl      String?
  activityType ActivityType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Song {
  id Int @default(autoincrement()) @id
  title String
  index Int
  book Book
  parts SongPart[]
  link String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([index])
}

model SongPart {
  id Int @default(autoincrement()) @id
  index Int
  name String
  content String @db.Text

  songId Int
  song Song @relation(fields: [songId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum Bipra {
  PKB
  WKI
  PMD
  RMJ
  ASM
}

enum ActivityType {
  SERVICE
  EVENT
  ANNOUNCEMENT
}

enum Book {
  NKB
  NNBT
  KJ
  DSL
}